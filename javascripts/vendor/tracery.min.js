var tracery={utilities:{}};(function(){function inQuotes(s){return'"'+s+'"'}function parseAction(action){return action}function parseTag(tag){var errors=[];var prefxns=[];var postfxns=[];var lvl=0;var start=0;var inPre=true;var symbol,mods;function nonAction(end){if(start!==end){var section=tag.substring(start,end);if(!inPre){errors.push("multiple possible expansion symbols in tag!"+tag)}else{inPre=false;var split=section.split(".");symbol=split[0];mods=split.slice(1,split.length)}}start=end}for(var i=0;i<tag.length;i++){var c=tag.charAt(i);switch(c){case"[":if(lvl===0){nonAction(i)}lvl++;break;case"]":lvl--;if(lvl===0){var section=tag.substring(start+1,i);if(inPre)prefxns.push(parseAction(section));else postfxns.push(parseAction(section));start=i+1}break;default:if(lvl===0){}break}}nonAction(i);if(lvl>0){var error="Too many '[' in rule "+inQuotes(tag);errors.push(error)}if(lvl<0){var error="Too many ']' in rule "+inQuotes(tag);errors.push(error)}return{preActions:prefxns,postActions:postfxns,symbol:symbol,mods:mods,raw:tag,errors:errors}}function parseRule(rule){var sections=[];var errors=[];if(!(typeof rule=="string"||rule instanceof String)){errors.push("Cannot parse non-string rule "+rule);sections.errors=errors;return sections}if(rule.length===0){return[]}var lvl=0;var start=0;var inTag=false;function createSection(end){var section=rule.substring(start,end);if(section.length>0){if(inTag)sections.push(parseTag(section));else sections.push(section)}inTag=!inTag;start=end+1}for(var i=0;i<rule.length;i++){var c=rule.charAt(i);switch(c){case"[":lvl++;break;case"]":lvl--;break;case"#":if(lvl===0){createSection(i)}break;default:break}}if(lvl>0){var error="Too many '[' in rule "+inQuotes(rule);errors.push(error)}if(lvl<0){var error="Too many ']' in rule "+inQuotes(rule);errors.push(error)}if(inTag){var error="Odd number of '#' in rule "+inQuotes(rule);errors.push(error)}createSection(rule.length);sections.errors=errors;return sections}function testParse(rule,shouldFail){console.log("-------");console.log("Test parse rule: "+inQuotes(rule)+" "+shouldFail);var parsed=parseRule(rule);if(parsed.errors&&parsed.errors.length>0){for(var i=0;i<parsed.errors.length;i++){console.log(parsed.errors[i])}}}function testParseTag(tag,shouldFail){console.log("-------");console.log("Test parse tag: "+inQuotes(tag)+" "+shouldFail);var parsed=parseTag(tag);if(parsed.errors&&parsed.errors.length>0){for(var i=0;i<parsed.errors.length;i++){console.log(parsed.errors[i])}}}tracery.testParse=testParse;tracery.testParseTag=testParseTag;tracery.parseRule=parseRule;tracery.parseTag=parseTag;function spacer(size){var s="";for(var i=0;i<size*3;i++){s+=" "}return s}function extend(destination,source){for(var k in source){if(source.hasOwnProperty(k)){destination[k]=source[k]}}return destination}(function(){var initializing=false,fnTest=/xyz/.test(function(){xyz})?/\b_super\b/:/.*/;this.Class=function(){};Class.extend=function(prop){var _super=this.prototype;initializing=true;var prototype=new this;initializing=false;for(var name in prop){prototype[name]=typeof prop[name]=="function"&&typeof _super[name]=="function"&&fnTest.test(prop[name])?function(name,fn){return function(){var tmp=this._super;this._super=_super[name];var ret=fn.apply(this,arguments);this._super=tmp;return ret}}(name,prop[name]):prop[name]}function Class(){if(!initializing&&this.init)this.init.apply(this,arguments)}Class.prototype=prototype;Class.prototype.constructor=Class;Class.extend=arguments.callee;return Class}})();var Rule=function(raw){this.raw=raw;this.sections=parseRule(raw)};Rule.prototype.getParsed=function(){if(!this.sections)this.sections=parseRule(raw);return this.sections};Rule.prototype.toString=function(){return this.raw};Rule.prototype.toJSONString=function(){return this.raw};var RuleWeighting=Object.freeze({RED:0,GREEN:1,BLUE:2});var RuleSet=function(rules){if(rules.constructor===Array){rules=rules.slice(0,rules.length)}else if(rules.prototype===RuleSet){}else if(typeof rules=="string"||rules instanceof String){var args=Array.prototype.slice.call(arguments);rules=args}else{console.log(rules);throw"creating ruleset with unknown object type!"}this.rules=rules;this.parseAll();this.uses=[];this.startUses=[];this.totalUses=0;for(var i=0;i<this.rules.length;i++){this.uses[i]=0;this.startUses[i]=this.uses[i];this.totalUses+=this.uses[i]}};RuleSet.prototype.parseAll=function(fxn){for(var i=0;i<this.rules.length;i++){if(this.rules[i].prototype!==Rule)this.rules[i]=new Rule(this.rules[i])}};RuleSet.prototype.mapRules=function(fxn){return this.rules.map(function(rule,index){return fxn(rule,index)})};RuleSet.prototype.applyToRules=function(fxn){for(var i=0;i<this.rules.length;i++){fxn(this.rules[i],i)}};RuleSet.prototype.get=function(){var index=this.getIndex();return this.rules[index]};RuleSet.prototype.getRandomIndex=function(){return Math.floor(this.uses.length*Math.random())};RuleSet.prototype.getIndex=function(){var index=this.getRandomIndex();var median=this.totalUses/this.uses.length;var count=0;while(this.uses[index]>median&&count<20){index=this.getRandomIndex();count++}return index};RuleSet.prototype.decayUses=function(pct){this.totalUses=0;for(var i=0;i<this.uses;i++){this.uses[index]*=1-pct;this.totalUses+=this.uses[index]}};RuleSet.prototype.testRandom=function(){console.log("Test random");var counts=[];for(var i=0;i<this.uses.length;i++){counts[i]=0}var testCount=10*this.uses.length;for(var i=0;i<testCount;i++){var index=this.getIndex();this.uses[index]+=1;counts[index]++;this.decayUses(.1)}for(var i=0;i<this.uses.length;i++){console.log(i+":	"+counts[i]+" 	"+this.uses[i])}};RuleSet.prototype.getSaveRules=function(){var jsonRules=this.rules.map(function(rule){return rule.toJSONString()});return jsonRules};var Action=function(node,raw){this.node=node;this.grammar=node.grammar;this.raw=raw};Action.prototype.activate=function(){var node=this.node;node.actions.push(this);this.amended=this.grammar.flatten(this.raw);var parsed=parseTag(this.amended);var subActionRaw=parsed.preActions;if(subActionRaw&&subActionRaw.length>0){this.subactions=subActionRaw.map(function(action){return new Action(node,action)})}if(parsed.symbol){var split=parsed.symbol.split(":");if(split.length===2){this.push={symbol:split[0],rules:split[1].split(",")};node.grammar.pushRules(this.push.symbol,this.push.rules)}else throw"Unknown action: "+parsed.symbol}if(this.subactions){for(var i=0;i<this.subactions.length;i++){this.subactions[i].activate()}}};Action.prototype.deactivate=function(){if(this.subactions){for(var i=0;i<this.subactions.length;i++){this.subactions[i].deactivate()}}if(this.push){this.node.grammar.popRules(this.push.symbol,this.push.rules)}};var isConsonant=function(c){c=c.toLowerCase();switch(c){case"a":return false;case"e":return false;case"i":return false;case"o":return false;case"u":return false}return true};function endsWithConY(s){if(s.charAt(s.length-1)==="y"){return isConsonant(s.charAt(s.length-2))}return false}var universalModifiers={capitalizeAll:function(s){return s.replace(/(?:^|\s)\S/g,function(a){return a.toUpperCase()})},capitalize:function(s){return s.charAt(0).toUpperCase()+s.slice(1)},inQuotes:function(s){return'"'+s+'"'},comma:function(s){var last=s.charAt(s.length-1);if(last===",")return s;if(last===".")return s;if(last==="?")return s;if(last==="!")return s;return s+","},beeSpeak:function(s){s=s.replace(/s/,"zzz");return s},a:function(s){if(!isConsonant(s.charAt()))return"an "+s;return"a "+s},s:function(s){var last=s.charAt(s.length-1);switch(last){case"y":if(!isConsonant(s.charAt(s.length-2))){return s+"s"}else{return s.slice(0,s.length-1)+"ies"}break;case"x":return s.slice(0,s.length-1)+"xen";case"z":return s.slice(0,s.length-1)+"zes";case"h":return s.slice(0,s.length-1)+"hes";default:return s+"s"}},ed:function(s){var index=s.indexOf(" ");var s=s;var rest="";if(index>0){rest=s.substring(index,s.length);s=s.substring(0,index)}var last=s.charAt(s.length-1);switch(last){case"y":if(isConsonant(s.charAt(s.length-2))){return s.slice(0,s.length-1)+"ied"+rest}else{return s+"ed"+rest}break;case"e":return s+"d"+rest;break;default:return s+"ed"+rest}}};var nodeCount=0;var ExpansionNode=Class.extend({init:function(){this.depth=0;this.id=nodeCount;nodeCount++;this.childText="[[UNEXPANDED]]"},setParent:function(parent){if(parent){this.depth=parent.depth+1;this.parent=parent;this.grammar=parent.grammar}},expand:function(){return"???"},expandChildren:function(){if(this.children){this.childText="";for(var i=0;i<this.children.length;i++){this.children[i].expand();this.childText+=this.children[i].finalText}this.finalText=this.childText}},createChildrenFromSections:function(sections){var root=this;this.children=sections.map(function(section){if(typeof section=="string"||section instanceof String){return new TextNode(root,section)}else{return new TagNode(root,section)}})}});var RootNode=ExpansionNode.extend({init:function(grammar,rawRule){this._super();this.grammar=grammar;this.parsedRule=parseRule(rawRule)},expand:function(){var root=this;this.createChildrenFromSections(this.parsedRule);this.expandChildren()}});var TagNode=ExpansionNode.extend({init:function(parent,parsedTag){this._super();if(!(parsedTag!==null&&typeof parsedTag==="object")){if(typeof parsedTag=="string"||parsedTag instanceof String){console.warn("Can't make tagNode from unparsed string!");parsedTag=parseTag(parsedTag)}else{console.log("Unknown tagNode input: ",parsedTag);throw"Can't make tagNode from strange tag!"}}this.setParent(parent);$.extend(this,parsedTag)},expand:function(){if(tracery.outputExpansionTrace)console.log(r.sections);this.rule=this.grammar.getRule(this.symbol);this.actions=[];this.createChildrenFromSections(this.rule.getParsed());for(var i=0;i<this.preActions.length;i++){var action=new Action(this,this.preActions[i]);action.activate()}if(!this.rule.sections)console.log(this.rule);this.expandChildren();for(var i=0;i<this.actions.length;i++){this.actions[i].deactivate()}this.finalText=this.childText;for(var i=0;i<this.mods.length;i++){this.finalText=this.grammar.applyMod(this.mods[i],this.finalText)}},toLabel:function(){return this.symbol},toString:function(){return"TagNode '"+this.symbol+"' mods:"+this.mods+", preactions:"+this.preActions+", postactions"+this.postActions}});var TextNode=ExpansionNode.extend({isLeaf:true,init:function(parent,text){this._super();this.setParent(parent);this.text=text;this.finalText=text},expand:function(){},toLabel:function(){return this.text}});function Symbol(grammar,key){this.grammar=grammar;this.key=key;this.currentRules=undefined;this.ruleSets=[]}Symbol.prototype.loadFrom=function(rules){rules=this.wrapRules(rules);this.baseRules=rules;this.ruleSets.push(rules);this.currentRules=this.ruleSets[this.ruleSets.length-1]};Symbol.prototype.mapRules=function(fxn){return this.currentRules.mapRules(fxn)};Symbol.prototype.applyToRules=function(fxn){this.currentRules.applyToRules(fxn)};Symbol.prototype.wrapRules=function(rules){if(rules.prototype!==RuleSet){if(Array.isArray(rules)){return new RuleSet(rules)}else if(typeof rules=="string"||rules instanceof String){return new RuleSet(rules)}else{throw"Unknown rules type: "+rules}}return rules};Symbol.prototype.pushRules=function(rules){rules=this.wrapRules(rules);this.ruleSets.push(rules);this.currentRules=this.ruleSets[this.ruleSets.length-1]};Symbol.prototype.popRules=function(){var exRules=this.ruleSets.pop();if(this.ruleSets.length===0){}this.currentRules=this.ruleSets[this.ruleSets.length-1]};Symbol.prototype.setRules=function(rules){rules=this.wrapRules(rules);this.ruleSets=[rules];this.currentRules=rules};Symbol.prototype.addRule=function(rule){this.currentRules.addRule(seed)};Symbol.prototype.select=function(){this.isSelected=true};Symbol.prototype.deselect=function(){this.isSelected=false};Symbol.prototype.getRule=function(seed){return this.currentRules.get(seed)};Symbol.prototype.toString=function(){return this.key+": "+this.currentRules+"(overlaying "+(this.ruleSets.length-1)+")"};Symbol.prototype.toJSON=function(){var rules=this.baseRules.rules.map(function(rule){return'"'+rule.raw+'"'});return'"'+this.key+'"'+": ["+rules.join(", ")+"]"};Symbol.prototype.toHTML=function(useSpans){var keySpan='"'+this.key+'"';if(useSpans)keySpan="<span class='symbol symbol_"+this.key+"'>"+keySpan+"</span>";var rules=this.baseRules.rules.map(function(rule){var cleaned=rule.raw.replace(/&/g,"&amp;");cleaned=cleaned.replace(/>/g,"&gt;");cleaned=cleaned.replace(/</g,"&lt;");var s='"'+cleaned+'"';if(useSpans)s="<span class='rule'>"+s+"</span>";return s});return keySpan+": ["+rules.join(", ")+"]"};function Grammar(){this.clear()}Grammar.prototype.clear=function(){this.symbols={};this.errors=[];this.modifiers={};for(var mod in universalModifiers){if(universalModifiers.hasOwnProperty(mod))this.modifiers[mod]=universalModifiers[mod]}};Grammar.prototype.loadFrom=function(obj){var symbolSrc;this.clear();if(obj.symbols!==undefined){symbolSrc=obj.symbols}else{symbolSrc=obj}var keys=Object.keys(symbolSrc);this.symbolNames=[];for(var i=0;i<keys.length;i++){var key=keys[i];this.symbolNames.push(key);this.symbols[key]=new Symbol(this,key);this.symbols[key].loadFrom(symbolSrc[key])}};Grammar.prototype.toHTML=function(useSpans){var keys=Object.keys(this.symbols);this.symbolNames=[];var lines=[];var count=0;for(var i=0;i<keys.length;i++){var key=keys[i];var symbol=this.symbols[key];if(symbol&&symbol.baseRules){lines.push("    "+this.symbols[key].toHTML(useSpans))}}var s;s=lines.join(",</p><p>");s="{<p>"+s+"</p>}";return s};Grammar.prototype.toJSON=function(){var keys=Object.keys(this.symbols);this.symbolNames=[];var lines=[];var count=0;for(var i=0;i<keys.length;i++){var key=keys[i];var symbol=this.symbols[key];if(symbol&&symbol.baseRules){lines.push("    "+this.symbols[key].toJSON())}}var s;s=lines.join(",\n");s="{\n"+s+"\n}";return s};Grammar.prototype.select=function(){this.isSelected=true};Grammar.prototype.deselect=function(){this.isSelected=false};Grammar.prototype.mapSymbols=function(fxn){var symbols=this.symbols;return this.symbolNames.map(function(name){return fxn(symbols[name],name)})};Grammar.prototype.applyToSymbols=function(fxn){for(var i=0;i<this.symbolNames.length;i++){var key=this.symbolNames[i];fxn(this.symbols[key],key)}};Grammar.prototype.addOrGetSymbol=function(key){if(this.symbols[key]===undefined)this.symbols[key]=new Symbol(key);return this.symbols[key]};Grammar.prototype.pushRules=function(key,rules){var symbol=this.addOrGetSymbol(key);symbol.pushRules(rules)};Grammar.prototype.popRules=function(key,rules){var symbol=this.addOrGetSymbol(key);var popped=symbol.popRules();if(symbol.ruleSets.length===0){this.symbols[key]=undefined}};Grammar.prototype.applyMod=function(modName,text){if(!this.modifiers[modName]){console.log(this.modifiers);throw"Unknown mod: "+modName}return this.modifiers[modName](text)};Grammar.prototype.getRule=function(key,seed){var symbol=this.symbols[key];if(symbol===undefined){var r=new Rule("{{"+key+"}}");r.error="Missing symbol "+key;return r}var rule=symbol.getRule();if(rule===undefined){var r=new Rule("["+key+"]");console.log(r.sections);r.error="Symbol "+key+" has no rule";return r}return rule};Grammar.prototype.expand=function(raw){var root=new RootNode(this,raw);root.expand();return root};Grammar.prototype.flatten=function(raw){var root=new RootNode(this,raw);root.expand();return root.childText};Grammar.prototype.analyze=function(){this.symbolNames=[];for(var name in this.symbols){if(this.symbols.hasOwnProperty(name)){this.symbolNames.push(name)}}for(var i=0;i<this.symbolNames.length;i++){var key=this.symbolNames[i];var symbol=this.symbols[key];for(var j=0;j<symbol.baseRules.length;j++){var rule=symbol.baseRules[j];rule.parsed=tracery.parse(rule.raw)}}};Grammar.prototype.selectSymbol=function(key){console.log(this);var symbol=this.get(key)};tracery.createGrammar=function(obj){var grammar=new Grammar;grammar.loadFrom(obj);return grammar}})();
